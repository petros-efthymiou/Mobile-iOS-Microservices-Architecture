//
//  HomeDataTests-HomeDataMocks.generated.swift
//  HomeData
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import HomeData
@testable import Mockingbird
import Foundation
import HomeApplication
import Resolver
import RxSwift
import Swift

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked ArticleDataSourceLocal
public final class ArticleDataSourceLocalMock: HomeData.ArticleDataSourceLocal, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeData.ArticleDataSourceLocal
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeData"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ArticleDataSourceLocalMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `findArticle`(`id`: String)
  public func `findArticle`(`id`: String) -> HomeApplication.ArticlePlain {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`findArticle`(`id`: String) -> HomeApplication.ArticlePlain", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`id`)], returnType: Swift.ObjectIdentifier((HomeApplication.ArticlePlain).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) -> HomeApplication.ArticlePlain { return mkbImpl(`id`) }
      if let mkbImpl = mkbImpl as? () -> HomeApplication.ArticlePlain { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: HomeApplication.ArticlePlain = mkbObject.`findArticle`(id: `id`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (HomeApplication.ArticlePlain).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `findArticle`(`id`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> HomeApplication.ArticlePlain, HomeApplication.ArticlePlain> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> HomeApplication.ArticlePlain, HomeApplication.ArticlePlain>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`findArticle`(`id`: String) -> HomeApplication.ArticlePlain", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`id`)], returnType: Swift.ObjectIdentifier((HomeApplication.ArticlePlain).self)))
  }

  // MARK: Mocked `streamAllArticles`()
  public func `streamAllArticles`() -> Observable<[HomeApplication.ArticlePlain]> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`streamAllArticles`() -> Observable<[HomeApplication.ArticlePlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.ArticlePlain]>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Observable<[HomeApplication.ArticlePlain]> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<[HomeApplication.ArticlePlain]> = mkbObject.`streamAllArticles`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<[HomeApplication.ArticlePlain]>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `streamAllArticles`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.ArticlePlain]>, Observable<[HomeApplication.ArticlePlain]>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.ArticlePlain]>, Observable<[HomeApplication.ArticlePlain]>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`streamAllArticles`() -> Observable<[HomeApplication.ArticlePlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.ArticlePlain]>).self)))
  }

  // MARK: Mocked `updateArticle`(`plain`: HomeApplication.ArticlePlain)
  public func `updateArticle`(`plain`: HomeApplication.ArticlePlain) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`updateArticle`(`plain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`plain`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (HomeApplication.ArticlePlain) -> Void { return mkbImpl(`plain`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`updateArticle`(plain: `plain`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `updateArticle`(`plain`: @autoclosure () -> HomeApplication.ArticlePlain) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`updateArticle`(`plain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`plain`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `ArticleDataSourceLocal`.
public func mock(_ type: HomeData.ArticleDataSourceLocal.Protocol, file: StaticString = #file, line: UInt = #line) -> ArticleDataSourceLocalMock {
  return ArticleDataSourceLocalMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ArticleDataSourceRemote
public final class ArticleDataSourceRemoteMock: HomeData.ArticleDataSourceRemote, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeData.ArticleDataSourceRemote
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeData"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ArticleDataSourceRemoteMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `fetchArticles`()
  public func `fetchArticles`() -> Observable<[HomeApplication.ArticlePlain]> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`fetchArticles`() -> Observable<[HomeApplication.ArticlePlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.ArticlePlain]>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Observable<[HomeApplication.ArticlePlain]> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<[HomeApplication.ArticlePlain]> = mkbObject.`fetchArticles`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<[HomeApplication.ArticlePlain]>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `fetchArticles`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.ArticlePlain]>, Observable<[HomeApplication.ArticlePlain]>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.ArticlePlain]>, Observable<[HomeApplication.ArticlePlain]>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`fetchArticles`() -> Observable<[HomeApplication.ArticlePlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.ArticlePlain]>).self)))
  }

  // MARK: Mocked `updateArticleToServer`(`plain`: HomeApplication.ArticlePlain)
  public func `updateArticleToServer`(`plain`: HomeApplication.ArticlePlain) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`updateArticleToServer`(`plain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`plain`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (HomeApplication.ArticlePlain) -> Void { return mkbImpl(`plain`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`updateArticleToServer`(plain: `plain`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `updateArticleToServer`(`plain`: @autoclosure () -> HomeApplication.ArticlePlain) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`updateArticleToServer`(`plain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`plain`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `ArticleDataSourceRemote`.
public func mock(_ type: HomeData.ArticleDataSourceRemote.Protocol, file: StaticString = #file, line: UInt = #line) -> ArticleDataSourceRemoteMock {
  return ArticleDataSourceRemoteMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked AuthorDataSourceLocal
public final class AuthorDataSourceLocalMock: HomeData.AuthorDataSourceLocal, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeData.AuthorDataSourceLocal
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeData"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    AuthorDataSourceLocalMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `findAuthors`()
  public func `findAuthors`() -> Observable<[HomeApplication.AuthorPlain]> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`findAuthors`() -> Observable<[HomeApplication.AuthorPlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.AuthorPlain]>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Observable<[HomeApplication.AuthorPlain]> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<[HomeApplication.AuthorPlain]> = mkbObject.`findAuthors`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<[HomeApplication.AuthorPlain]>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `findAuthors`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.AuthorPlain]>, Observable<[HomeApplication.AuthorPlain]>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[HomeApplication.AuthorPlain]>, Observable<[HomeApplication.AuthorPlain]>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`findAuthors`() -> Observable<[HomeApplication.AuthorPlain]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[HomeApplication.AuthorPlain]>).self)))
  }
}

/// Returns a concrete mock of `AuthorDataSourceLocal`.
public func mock(_ type: HomeData.AuthorDataSourceLocal.Protocol, file: StaticString = #file, line: UInt = #line) -> AuthorDataSourceLocalMock {
  return AuthorDataSourceLocalMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked LikesDataSourceLocal
public final class LikesDataSourceLocalMock: HomeData.LikesDataSourceLocal, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeData.LikesDataSourceLocal
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeData"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    LikesDataSourceLocalMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `findLikedArticles`()
  public func `findLikedArticles`() -> Observable<[String]> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`findLikedArticles`() -> Observable<[String]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[String]>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Observable<[String]> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<[String]> = mkbObject.`findLikedArticles`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<[String]>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `findLikedArticles`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[String]>, Observable<[String]>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<[String]>, Observable<[String]>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`findLikedArticles`() -> Observable<[String]>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<[String]>).self)))
  }

  // MARK: Mocked `saveLikedArticle`(`id`: String)
  public func `saveLikedArticle`(`id`: String) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`saveLikedArticle`(`id`: String) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`id`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) -> Void { return mkbImpl(`id`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`saveLikedArticle`(id: `id`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `saveLikedArticle`(`id`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`saveLikedArticle`(`id`: String) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`id`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `LikesDataSourceLocal`.
public func mock(_ type: HomeData.LikesDataSourceLocal.Protocol, file: StaticString = #file, line: UInt = #line) -> LikesDataSourceLocalMock {
  return LikesDataSourceLocalMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
