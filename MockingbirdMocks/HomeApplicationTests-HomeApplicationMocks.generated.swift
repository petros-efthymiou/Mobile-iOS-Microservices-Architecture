//
//  HomeApplicationTests-HomeApplicationMocks.generated.swift
//  HomeApplication
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import HomeApplication
@testable import Mockingbird
import Foundation
import Resolver
import RxSwift
import Swift

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked GetArticlesSource
public final class GetArticlesSourceMock: HomeApplication.GetArticlesSource, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeApplication.GetArticlesSource
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeApplication"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    GetArticlesSourceMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `articles`()
  public func `articles`() -> Observable<HomeApplication.ArticlesAuthorsLikes> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`articles`() -> Observable<HomeApplication.ArticlesAuthorsLikes>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<HomeApplication.ArticlesAuthorsLikes>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Observable<HomeApplication.ArticlesAuthorsLikes> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<HomeApplication.ArticlesAuthorsLikes> = mkbObject.`articles`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<HomeApplication.ArticlesAuthorsLikes>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `articles`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<HomeApplication.ArticlesAuthorsLikes>, Observable<HomeApplication.ArticlesAuthorsLikes>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Observable<HomeApplication.ArticlesAuthorsLikes>, Observable<HomeApplication.ArticlesAuthorsLikes>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`articles`() -> Observable<HomeApplication.ArticlesAuthorsLikes>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Observable<HomeApplication.ArticlesAuthorsLikes>).self)))
  }
}

/// Returns a concrete mock of `GetArticlesSource`.
public func mock(_ type: HomeApplication.GetArticlesSource.Protocol, file: StaticString = #file, line: UInt = #line) -> GetArticlesSourceMock {
  return GetArticlesSourceMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked LikeArticleSource
public final class LikeArticleSourceMock: HomeApplication.LikeArticleSource, Mockingbird.Mock {
  typealias MockingbirdSupertype = HomeApplication.LikeArticleSource
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "HomeApplication"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    LikeArticleSourceMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `findArticle`(`id`: String)
  public func `findArticle`(`id`: String) -> Observable<HomeApplication.ArticlesAuthorsLikes> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`findArticle`(`id`: String) -> Observable<HomeApplication.ArticlesAuthorsLikes>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`id`)], returnType: Swift.ObjectIdentifier((Observable<HomeApplication.ArticlesAuthorsLikes>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) -> Observable<HomeApplication.ArticlesAuthorsLikes> { return mkbImpl(`id`) }
      if let mkbImpl = mkbImpl as? () -> Observable<HomeApplication.ArticlesAuthorsLikes> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Observable<HomeApplication.ArticlesAuthorsLikes> = mkbObject.`findArticle`(id: `id`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Observable<HomeApplication.ArticlesAuthorsLikes>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `findArticle`(`id`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Observable<HomeApplication.ArticlesAuthorsLikes>, Observable<HomeApplication.ArticlesAuthorsLikes>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Observable<HomeApplication.ArticlesAuthorsLikes>, Observable<HomeApplication.ArticlesAuthorsLikes>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`findArticle`(`id`: String) -> Observable<HomeApplication.ArticlesAuthorsLikes>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`id`)], returnType: Swift.ObjectIdentifier((Observable<HomeApplication.ArticlesAuthorsLikes>).self)))
  }

  // MARK: Mocked `updateArticle`(`articlePlain`: HomeApplication.ArticlePlain)
  public func `updateArticle`(`articlePlain`: HomeApplication.ArticlePlain) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`updateArticle`(`articlePlain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`articlePlain`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (HomeApplication.ArticlePlain) -> Void { return mkbImpl(`articlePlain`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`updateArticle`(articlePlain: `articlePlain`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `updateArticle`(`articlePlain`: @autoclosure () -> HomeApplication.ArticlePlain) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (HomeApplication.ArticlePlain) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`updateArticle`(`articlePlain`: HomeApplication.ArticlePlain) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`articlePlain`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `LikeArticleSource`.
public func mock(_ type: HomeApplication.LikeArticleSource.Protocol, file: StaticString = #file, line: UInt = #line) -> LikeArticleSourceMock {
  return LikeArticleSourceMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
